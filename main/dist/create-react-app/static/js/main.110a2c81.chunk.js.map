{"version":3,"sources":["../webpack/universalModuleDefinition","webpack://cra-[name]/./src/pages/index/index.scss?467c","webpack://cra-[name]/./src/pages/about/about.scss?87d3","pages/index/index.scss","pages/about/about.scss","public-path.js","pages/index/index.jsx","pages/about/about.tsx","reducers/initialState.js","reducers/reducers.js","actions/actionType.js","App.js","serviceWorker.js","index.js"],"names":["root","factory","exports","module","define","amd","this","content","i","options","locals","push","window","__POWERED_BY_QIANKUN__","__webpack_public_path__","__INJECTED_PUBLIC_PATH_BY_QIANKUN__","IndexPage","className","styles","page","helloword","to","AboutPage","props","style","actionsCase","Map","state","action","Object","assign","payload","reducer","initialState","actionFunction","get","type","store","createStore","applyMiddleware","promiseMiddleware","App","basename","location","pathname","id","path","component","exact","Boolean","hostname","match","render","container","console","log","ReactDOM","querySelector","document","storeTest","onGlobalStateChange","value","prev","name","setGlobalState","ignore","user","bootstrap","a","mount","unmount","unmountComponentAtNode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.110a2c81.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cra-main\"] = factory();\n\telse\n\t\troot[\"cra-main\"] = factory();\n})(this, function() {\nreturn ","var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js?modules!../../../node_modules/sass-loader/dist/cjs.js?modules!./index.scss\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js?modules!../../../node_modules/sass-loader/dist/cjs.js?modules!./about.scss\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".si_wVZ91g54WP2UN-CkCv{width:100%;height:100%}.si_wVZ91g54WP2UN-CkCv .FoIMvF6n7tbwmk44yh6Uz{color:red}\\n\", \"\"]);\n\n// Exports\nexports.locals = {\n\t\"page\": \"si_wVZ91g54WP2UN-CkCv\",\n\t\"helloword\": \"FoIMvF6n7tbwmk44yh6Uz\"\n};","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"\", \"\"]);\n\n","if (window.__POWERED_BY_QIANKUN__) {\r\n  // eslint-disable-next-line no-undef\r\n  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\r\n}\r\n","import React, { useState } from 'react';\r\nimport styles from \"./index.scss\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction IndexPage() {\r\n  // const [count, setCount] = useState(0);\r\n  return (\r\n    <div className={styles.page}>\r\n      <div className={styles.helloword}>\r\n        <p>helloword</p>\r\n      </div>\r\n      <Link to={'/about'}>about</Link>\r\n    </div>\r\n  );\r\n}\r\nexport default IndexPage;\r\n","import React, { useState } from 'react';\r\nimport styles from \"./about.scss\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction AboutPage(props) {\r\n  // const [count, setCount] = useState(0);\r\n  return (\r\n    <div className={styles.page} style={props.style}>\r\n      <p>about</p>\r\n      <Link to={'/'}>返回</Link>\r\n    </div>\r\n  );\r\n}\r\nexport default AboutPage;\r\n","export default  {\r\n  page: 'index'\r\n}\r\n","/*\r\n\r\nReducers 指定了应用状态的变化如何响应 actions 并发送到 store 的，记住 actions 只是描述了有事情发生了这一事实，并没有描述应用如何更新 state。\r\n\r\n*/\r\n\r\nimport * as type from '../actions/actionType';\r\nimport initialState from './initialState';\r\nconst actionsCase = () => {\r\n  const change_page = (state, action) => {\r\n    return Object.assign({}, state, {\r\n      page: action.payload\r\n    });\r\n  };\r\n  return new Map([\r\n    [type.CHANGE_PAGE, change_page],\r\n  ])\r\n}\r\nfunction reducer(state = initialState, action) {\r\n  const actionFunction = actionsCase().get(action.type);\r\n  if (typeof actionFunction === 'function') {\r\n    return actionFunction(state, action);\r\n  }\r\n  else {\r\n    return state;\r\n  }\r\n}\r\n\r\nexport default reducer\r\n","export const CHANGE_PAGE = 'CHANGE_PAGE';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const GET_ITEM = 'GET_ITEM';\r\nexport const GET_RELAODINTRODUCTION = 'GET_RELAODINTRODUCTION';\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport IndexPage from './pages/index/index';\r\nimport AboutPage from './pages/about/about';\r\n\r\nimport { hot } from 'react-hot-loader';\r\n\r\nimport reducer from './reducers/reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport promiseMiddleware from 'redux-promise';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\n\r\nconst createLocalStore = function() {\r\n\tif (process.env.NODE_ENV === 'production') {\r\n\t\treturn createStore(reducer, applyMiddleware(promiseMiddleware));\r\n\t} else {\r\n\t\treturn createStore(reducer, composeWithDevTools(applyMiddleware(promiseMiddleware)));\r\n\t}\r\n};\r\nlet store = createLocalStore();\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<BrowserRouter basename={window.location.pathname}>\r\n\t\t\t\t<div id=\"container\">\r\n\t\t\t\t\t<Route path={'/about'} component={AboutPage} />\r\n\t\t\t\t\t<Route exact path={'/'} component={IndexPage} />\r\n\t\t\t\t</div>\r\n\t\t\t</BrowserRouter>\r\n\t\t</Provider>\r\n\t);\r\n}\r\n\r\nexport default hot(module)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './public-path';\nimport * as serviceWorker from './serviceWorker';\n\nfunction render(props) {\n\tconst { container } = props;\n\tconsole.log(container);\n\tReactDOM.render(<App />, container ? container.querySelector('#root') : document.querySelector('#root'));\n}\n\nfunction storeTest(props) {\n\tprops.onGlobalStateChange(\n\t\t(value, prev) => console.log(`[onGlobalStateChange - ${props.name}]:`, value, prev),\n\t\ttrue\n\t);\n\tprops.setGlobalState({\n\t\tignore: props.name,\n\t\tuser: {\n\t\t\tname: props.name\n\t\t}\n\t});\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n\trender({});\n}\n\nexport async function bootstrap() {\n\tconsole.log('[react16] react app bootstraped');\n}\n\nexport async function mount(props) {\n\tconsole.log('[react16] props from main framework', props);\n\tstoreTest(props);\n\trender(props);\n}\n\nexport async function unmount(props) {\n\tconst { container } = props;\n\tReactDOM.unmountComponentAtNode(container ? container.querySelector('#root') : document.querySelector('#root'));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}